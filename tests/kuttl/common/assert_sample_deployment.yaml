apiVersion: cinder.openstack.org/v1beta1
kind: Cinder
metadata:
  name: cinder
spec:
  serviceUser: cinder
  customServiceConfig: |
    [DEFAULT]
    debug = true
  databaseInstance: openstack
  databaseUser: cinder
  rabbitMqClusterName: rabbitmq
  cinderAPI:
    replicas: 1
  cinderScheduler:
    replicas: 1
  cinderBackup:
    replicas: 1
  cinderVolumes:
    volume1:
      replicas: 1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cinder-api
  ownerReferences:
  - apiVersion: cinder.openstack.org/v1beta1
    blockOwnerDeletion: true
    controller: true
    kind: CinderAPI
    name: cinder-api
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      component: cinder-api
      service: cinder
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        component: cinder-api
        service: cinder
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: service
                  operator: In
                  values:
                  - cinder
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - args:
        - -c
        - tail -n+1 -F /var/log/cinder/cinder-api.log
        command:
        - /bin/bash
        imagePullPolicy: IfNotPresent
        resources: {}
        securityContext:
          runAsUser: 0
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/log/cinder
          name: logs
      - args:
        - -c
        - /usr/local/bin/kolla_set_configs && /usr/local/bin/kolla_start
        command:
        - /bin/bash
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthcheck
            port: 8776
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 3
          successThreshold: 1
          timeoutSeconds: 5
        name: cinder-api
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthcheck
            port: 8776
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        resources: {}
        securityContext:
          runAsUser: 0
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/machine-id
          name: etc-machine-id
          readOnly: true
        - mountPath: /etc/localtime
          name: etc-localtime
          readOnly: true
        - mountPath: /usr/local/bin/container-scripts
          name: scripts
          readOnly: true
        - mountPath: /var/lib/config-data/merged
          name: config-data
          readOnly: true
        - mountPath: /etc/cinder/cinder.conf.d
          name: config-data-custom
          readOnly: true
        - mountPath: /var/lib/kolla/config_files/config.json
          name: config-data
          readOnly: true
          subPath: cinder-api-config.json
        - mountPath: /var/log/cinder
          name: logs
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      serviceAccount: cinder-cinder
      serviceAccountName: cinder-cinder
      volumes:
      - hostPath:
          path: /etc/machine-id
          type: ""
        name: etc-machine-id
      - hostPath:
          path: /etc/localtime
          type: ""
        name: etc-localtime
      - secret:
          defaultMode: 493
          secretName: cinder-scripts
        name: scripts
      - secret:
          defaultMode: 420
          secretName: cinder-config-data
        name: config-data
      - secret:
          defaultMode: 420
          secretName: cinder-api-config-data
        name: config-data-custom
      - emptyDir: {}
        name: logs
status:
  availableReplicas: 1
  replicas: 1
---
# when using image digests the containerImage URLs are SHA's so we verify them with a script
apiVersion: kuttl.dev/v1beta1
kind: TestAssert
commands:
  - script: |
      tupleTemplate='{{ range (index .spec.template.spec.containers 1).env }}{{ .name }}{{ "#" }}{{ .value}}{{"\n"}}{{ end }}'
      imageTuples=$(oc get -n openstack-operators deployment cinder-operator-controller-manager -o go-template="$tupleTemplate")
      for ITEM in $(echo $imageTuples); do
        # it is an image
        if echo $ITEM | grep 'RELATED_IMAGE' &> /dev/null; then
          NAME=$(echo $ITEM | sed -e 's|^RELATED_IMAGE_CINDER_\([^_]*\)_.*|\1|')
          IMG_FROM_ENV=$(echo $ITEM | sed -e 's|^.*#\(.*\)|\1|')
          template='{{.spec.containerImage}}'
          case $NAME in
            API)
              SERVICE_IMAGE=$(oc get -n $NAMESPACE cinderapi cinder-api -o go-template="$template")
              ;;
            BACKUP)
              SERVICE_IMAGE=$(oc get -n $NAMESPACE cinderbackup cinder-backup -o go-template="$template")
              ;;
            SCHEDULER)
              SERVICE_IMAGE=$(oc get -n $NAMESPACE cinderscheduler cinder-scheduler -o go-template="$template")
              ;;
            VOLUME)
              SERVICE_IMAGE=$(oc get -n $NAMESPACE cindervolume cinder-volume-volume1 -o go-template="$template")
              ;;
          esac
          if [ "$SERVICE_IMAGE" != "$IMG_FROM_ENV" ]; then
            echo "$NAME image does not equal $VALUE"
            exit 1
          fi
        fi
      done
      exit 0
